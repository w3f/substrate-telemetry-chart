{{- if and (.Values.frontend.enabled) (.Values.ingress.enabled) }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "substrate-telemetry.frontendAppName" . }}
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/limit-rps: "10"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    ingress.kubernetes.io/whitelist-source-range: {{ .Values.whiteListSourceRange }}
    cert-manager.io/cluster-issuer: {{ .Values.ingress.cluster_issuer | default "letsencrypt" | quote }}
    nginx.ingress.kubernetes.io/server-snippets: |
     location /feed {
      proxy_set_header Upgrade $http_upgrade;
      proxy_http_version 1.1;
      proxy_set_header X-Forwarded-Host $http_host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-For $http_x_forwarded_for;
      proxy_set_header Host $host;
      proxy_set_header Connection "upgrade";
      proxy_cache_bypass $http_upgrade;
      }
spec:
  {{- if .Values.ingress.ingressClassName }}
  ingressClassName: {{ .Values.ingress.ingressClassName }}
  {{- end }}
  tls:
  - hosts:
      - {{ include "substrate-telemetry.frontendDomain" . }}
    secretName: {{ include "substrate-telemetry.tlsSecretName" . }}-frontend
  rules:
  - host: {{ include "substrate-telemetry.frontendDomain" . }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ include "substrate-telemetry.frontendSvcName" . }}
            port:
              number: {{ .Values.frontendPort }}
      - path: /feed
        pathType: Prefix
        backend:
          service:
            name: {{ include "substrate-telemetry.backendSvcName" . }}-core
            port:
              number: {{ .Values.backendPortCore }}
{{- end }}
